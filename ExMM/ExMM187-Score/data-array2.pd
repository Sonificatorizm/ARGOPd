#N canvas 31 33 494 542 12;
#X obj 11 232 f;
#X obj 51 228 + 1;
#X obj 69 263 sel;
#X msg 29 199 1;
#X msg 194 228 0;
#X obj 336 435 *;
#X obj 11 172 del;
#X obj 332 379 t f f;
#X obj 336 409 -;
#X msg 384 379 0;
#X obj 354 110 r delay-multiplier;
#X obj 11 110 r reset-stop;
#X obj 155 110 inlet;
#X obj 87 228 getsize \$1 \$2;
#X obj 194 295 element \$1 \$2;
#X obj 87 295 element \$1 \$2;
#X obj 126 473 outlet;
#X obj 293 473 outlet;
#X obj 87 321 get \$3 y w x;
#X obj 194 321 get \$3 y w;
#X obj 183 473 outlet;
#X obj 261 359 t f b;
#X obj 293 389 0;
#X obj 155 144 t b b p b;
#X text 142 88 pointer in;
#X text 30 5 This is an abstraction used in the sequencer example.
Here we take a pointer and sequence an array belonging to it \, either
the amplitude or the frequency \, depending on the value of argument
2 The template of the scalar is given by argument 1 and that of the
array elements by argument 3;
#X text 53 494 Outlets: new y value \, new w value \, time to ramp
to new values.;
#X obj 12 327 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 2 256;
#X obj 16 361 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X connect 0 0 1 0;
#X connect 0 0 2 0;
#X connect 0 0 27 0;
#X connect 1 0 0 1;
#X connect 2 1 15 0;
#X connect 3 0 0 1;
#X connect 4 0 14 0;
#X connect 5 0 6 0;
#X connect 5 0 17 0;
#X connect 6 0 0 0;
#X connect 7 0 8 1;
#X connect 7 1 8 0;
#X connect 8 0 5 0;
#X connect 9 0 8 1;
#X connect 10 0 5 1;
#X connect 11 0 6 0;
#X connect 12 0 23 0;
#X connect 13 0 2 1;
#X connect 13 0 28 0;
#X connect 14 0 19 0;
#X connect 15 0 18 0;
#X connect 18 0 16 0;
#X connect 18 1 20 0;
#X connect 18 2 7 0;
#X connect 19 0 16 0;
#X connect 19 1 21 0;
#X connect 21 0 20 0;
#X connect 21 1 22 0;
#X connect 22 0 17 0;
#X connect 23 0 0 0;
#X connect 23 1 4 0;
#X connect 23 2 14 1;
#X connect 23 2 13 0;
#X connect 23 2 15 1;
#X connect 23 3 3 0;
#X connect 23 3 9 0;
